{"version":3,"sources":["pages/home/index.js","pages/characters/index.js","pages/episodes/index.js","pages/locations/index.js","pages/about/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","Component","Characters","Episodes","Locations","About","App","className","basename","process","Navbar","collapseOnSelect","expand","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","to","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+UAKqBA,G,uLAEb,OACI,6BACI,yC,GAJkBC,cCCnBC,MAJf,WACQ,OAAO,gDCGAC,MAJf,WACI,OAAO,8CCGIC,MAJf,WACI,OAAO,+CCGIC,MAJf,WACI,OAAO,2CC6DIC,MA7Cf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAQC,SAAUC,0BAChB,gCACI,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,QAAQ,OAAON,UAAU,UAC1D,kBAACG,EAAA,EAAOI,MAAR,mBACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,0BAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,yBAChB,kBAACC,EAAA,EAAD,CAAKZ,UAAU,WACX,kBAAC,IAAD,CAAMa,GAAG,IAAIb,UAAU,YAAvB,QACA,kBAAC,IAAD,CAAMa,GAAG,cAAcb,UAAU,YAAjC,cACA,kBAAC,IAAD,CAAMa,GAAG,YAAYb,UAAU,YAA/B,YACA,kBAAC,IAAD,CAAMa,GAAG,aAAab,UAAU,YAAhC,cAEJ,kBAACY,EAAA,EAAD,KACI,kBAAC,IAAD,CAAMC,GAAG,SAASb,UAAU,YAA5B,aAKhB,yBAAMA,UAAU,wBACZ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,KAAK,eACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,YC3CIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.25a920d2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './styles.css';\r\n\r\n\r\nexport default class Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Home</h1>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}","import React from 'react';\r\n\r\nfunction Characters() {\r\n        return <h1>Characters Page</h1>;\r\n};\r\n\r\nexport default Characters;","import React from 'react';\r\n\r\nfunction Episodes() {\r\n    return <h1>Episodes Page</h1>\r\n};\r\n\r\nexport default Episodes;","import React from 'react';\r\n\r\nfunction Locations() {\r\n    return <h1>Locations Page</h1>\r\n}\r\n\r\nexport default Locations;","import React from 'react';\r\n\r\nfunction About() {\r\n    return <h1>About Page</h1>\r\n};\r\n\r\nexport default About;","import React from 'react';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from 'react-router-dom';\r\n\r\nimport Home from './pages/home/index';\r\nimport Characters from './pages/characters/index';\r\nimport Episodes from './pages/episodes/index';\r\nimport Locations from './pages/locations/index';\r\nimport About from './pages/about/index';\r\n// import Header from './components/Header/index';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <header>\r\n            <Navbar collapseOnSelect expand=\"lg\" variant=\"dark\" className=\"navbar\">\r\n                <Navbar.Brand>Multiverse</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Link to=\"/\" className=\"nav-link\">Home</Link>\r\n                        <Link to=\"/characters\" className=\"nav-link\">Characters</Link>\r\n                        <Link to=\"/episodes\" className=\"nav-link\">Episodes</Link>\r\n                        <Link to=\"/locations\" className=\"nav-link\">Locations</Link>\r\n                    </Nav>\r\n                    <Nav>\r\n                        <Link to=\"/about\" className=\"nav-link\">About</Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </header>\r\n        <div  className=\"container text-light\">\r\n            <Switch>\r\n              <Route path=\"/characters\">\r\n                <Characters />\r\n              </Route>\r\n              <Route path=\"/episodes\">\r\n                <Episodes />\r\n              </Route>\r\n              <Route path=\"/locations\">\r\n                <Locations />\r\n              </Route>\r\n              <Route path=\"/about\">\r\n                <About />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <Home />\r\n              </Route>\r\n            </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './styles.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}